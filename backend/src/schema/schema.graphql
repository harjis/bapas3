scalar Date
scalar FileUpload

type Account {
    id: ID!
    name: String
    iban: String!
    user: User!
}
type AuthPayload {
    token: String!
    user: User!
}

type File {
    id: ID!
    hasBeenProcessed: Boolean!
    filename: String!
    mimetype: String!
    encoding: String!
}

type OtherAccount {
    id: ID!
    name: String!
    iban: String!
}

type Payment {
    id: ID!
    amount: Float!
    paymentDate: Date!
    account: Account!
    otherAccount: OtherAccount!
}

type DeleteResult {
    count: Int!
}
type User {
    id: ID!
    email: String!
    password: String!
    name: String!
    accounts: [Account!]!
}

type Query {
    accounts: [Account!]!
    files: [File!]!
    currentUser(id: Int): User!
    payments: [Payment!]!
    users: [User!]!
}

type Mutation {
    createAccount(name: String!, iban: String!): Account!

    createUser(email: String!, password: String!, name: String!): AuthPayload!
    updateUser(id: ID!, name: String!): User!
    deleteUser(id: ID!): DeleteResult!

    addFile (file: FileUpload!): File!
    deleteFile(id: ID!): DeleteResult!
    processFile(id: ID!): File
}
